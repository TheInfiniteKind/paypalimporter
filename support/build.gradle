apply plugin: 'application'

dependencies {
    compile project(':core')
    annotationProcessor "com.google.dagger:dagger-compiler:2.4"

    runtime('org.slf4j:slf4j-simple:1.7.25')
    runtime('com.syncthemall:dropbox-java-sdk:1.5.3.2')

    testCompile('junit:junit:4.12')

    testRuntime('org.slf4j:slf4j-simple:1.7.25')
}

mainClassName = 'com.moneydance.modules.features.paypalimporter.ConsoleRunner'

test {
    jacocoTestReport {
        sourceDirectories = files(project(':core').sourceSets.main.allSource.srcDirs)
        classDirectories =  files(project(':core').sourceSets.main.output)

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        include: 'com/moneydance/modules/features/paypalimporter/**',
                        exclude: [
                                '**/*Mock.class',
                                '**/Mock*.class',
                                '**/ConsoleRunner*.class',
                                '**/*_MembersInjector.class',
                                '**/Dagger*Component.class', // covers component implementations
                                '**/Dagger*Component$Builder.class', // covers component builders
                                '**/*_*Factory.class',
                                '**/*Module.class',
                        ])
            })
        }
    }
}

task genKeys(type: JavaExec) {
    description 'Generates a passphrase-protected key pair.'
    standardInput = System.in
    classpath = files("$rootDir/lib/extadmin.jar")
    main = 'com.moneydance.admin.KeyAdmin'
    args 'genkey', privkeyfile, pubkeyfile
}

task sign(type: JavaExec) {
    description 'Signs an MXT file with a private key that must already exist.'
    onlyIf {
        new File(privkeyfile as String).exists()
    }
    standardInput = System.in
    classpath = files("$rootDir/lib/extadmin.jar", "$rootDir/lib/moneydance-1358.jar")
    main = 'com.moneydance.admin.KeyAdmin'
    args 'signextjar', privkeyfile, privkeyid, rootProject.name, mxtfile
}

sign.doLast {
    new File("$projectDir/s-paypalimporter.mxt").renameTo mxtfile as String
}
