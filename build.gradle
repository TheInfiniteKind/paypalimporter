buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.18'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath 'commons-configuration:commons-configuration:1.10'
        classpath 'net.sf.proguard:proguard-gradle:6.0.2'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'idea'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    sourceCompatibility = 1.8

    ext {
        privkeyid = '99'
        privkeyfile = "$rootDir/config/priv_key"
        pubkeyfile = "$rootDir/config/pub_key"
        mxtfile = "${project(':core').distsDir}/${rootProject.name}.mxt"
    }

    repositories {
        mavenCentral()
        flatDir dirs: "$rootDir/lib"
    }

    findbugs {
        effort = "max"
        reportLevel = "medium"
        excludeFilter file("$rootDir/config/findbugs-exclude.xml")
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    jacoco {
        toolVersion = "0.8.2"
    }

    task checkstyleHtml(dependsOn: checkstyleMain) {
        if (checkstyleMain.reports.xml.destination.exists()) {
            ant.xslt(in: checkstyleMain.reports.xml.destination,
                    style: file("$rootDir/config/checkstyle/checkstyle-noframes-sorted.xsl"),
                    out: new File(checkstyleMain.reports.xml.destination.parent as String, 'main.html'))
        }
    }

    checkstyleMain.finalizedBy checkstyleHtml

    pmd {
        toolVersion = "6.11.0"
        sourceSets = [sourceSets.main]
        ruleSets = []
        ruleSetFiles = files("$rootDir/config/pmd-ruleSet.xml")
    }

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.organization", "${rootProject.name}"
        }
    }
}

task createLibs(type: Exec) {
    description 'Generates patched libraries from trusted source'
    commandLine 'sh', 'config/create_libs.sh'
}
